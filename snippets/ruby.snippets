# #!/usr/bin/env ruby
snippet ruby 
	#!/usr/bin/env ruby

# New Block
snippet rdoc 
	=begin rdoc
		${1}
	=end
snippet rescue with specific exception
	rescue ${1:Exception} => ${2:e}
snippet require All files deeper to current file
	Dir[File.dirname(__FILE__) + '/${1:directory}/*.rb'].each {|file| require file }
snippet require File parent to the current file
	require File.expand_path(File.dirname(__FILE__) + '/../${1:file_to_include}')
snippet require All files in a directory
	Dir["${1:path/to/directory}/*.rb"].each {|file| require file }
snippet switch 
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet for
	for ${1:e} in ${2:c}
		${3}
	end		
snippet class class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet class class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end


	end
snippet class class << self .. end
	class << self
		${1}
	end
snippet module module .. ClassMethods .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
# include Enumerable
snippet Enumerable
	include Enumerable

	def each(&block)
		${1}
	end
# include Comparable
snippet Comparable
	include Comparable

	def <=>(other)
		${1}
	end
# def method_missing
snippet method_missing 
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet alias_method
	alias_method :${1:new_name}, :${2:old_name}
snippet file File.foreach() { |line| .. }
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
snippet file File.read()
	File.read(${1:"path/to/file"})${2}
snippet dirname
	Filename.dirname(__FILE__)
snippet times
	times { |${1:n}| ${2} }
snippet each {}
	each { |${1:e}| ${2} }
snippet each_byte 
	each_byte { |${1:byte}| ${2} }
snippet each_char { |chr| .. }
	each_char { |${1:chr}| ${2} }
snippet each_key {}
	each_key { |${1:key}| ${2} }
snippet each_line {}
	each_line { |${1:line}| ${2} }
snippet each_value {}
	each_value { |${1:val}| ${2} }
snippet each_with_index {}
	each_with_index { |${1:e}, ${2:i}| ${3} }
snippet reduce {}
	reduce(${1:init}) { |${2:sum}, ${3:value}| ${4} }
snippet sort
	sort { |a, b| ${1} }
snippet sort_by
	sort_by { |${1:e}| ${2} }
snippet random 
	sort_by { rand }
snippet all
	all? { |${1:e}| ${2} }
snippet any
	any? { |${1:e}| ${2} }
snippet find
	find { |${1:e}| ${2} }
snippet fetch
	fetch(${1:name}) { |${2:key}| ${3} }
snippet max
	max { |a, b| ${1} }
snippet min
	min { |a, b| ${1} }
snippet partition {}
	partition { |${1:e}| ${2} }
snippet reject {}
	reject { |${1:e}| ${2} }
snippet lambda
	lambda { |${1:args}| ${2} }
snippet namespace
	namespace :${1:`Filename()`} do
		${2}
	end
# MiniTest
snippet minitest New unit test class 
	class Test${1:class_name} < MiniTest::Unit::TestCase
		def setup
		end

		def test_${2:first_test}
			${3}
		end
	end
snippet minitest New unit spec
	describe ${1:describe_this} do
		${2}
	end
snippet minitest Guardfile
	guard 'minitest' do
		watch(%r|^test/test_(.*)\.rb|)
		watch(%r|^lib/(.*)([^/]+)\.rb|)     { |m| "test/#{m[1]}test_#{m[2]}.rb" }
		watch(%r|^test/test_helper\.rb|)    { "test" }
		watch(%r|^lib/(.*)\.rb|)            { |m| "test/test_#{m[1]}.rb" }

		watch(%r{^spec/.+_spec\.rb$})
		watch(%r{^lib/(.+)\.rb$})         { |m| "spec/lib/#{m[1]}_spec.rb" }
		watch(%r{^lib/xxxxxx/(.+)\.rb$})         { |m| "spec/xxxxxx/#{m[1]}_spec.rb" }
		watch(%r{^spec/models/.+\.rb$})   { ["spec/models", "spec/acceptance"] }
		watch('spec/spec_helper.rb')      { "spec" }
	end
snippet minitest Gemfile
	gem 'minitest'
	group :development do
		gem 'guard'
		gem 'guard-minitest', :git => 'git://github.com/aspiers/guard-minitest.git'
		gem 'ruby_gntp'
	end
snippet minitest spec_helper
	require 'minitest/spec'
	require 'minitest/autorun'
	require './lib/{1:file_to_test}.rb'
snippet minitest Rakefile
	require 'rake/testtask'

	task :default => [:test]

	Rake::TestTask.new do |t|
	  t.libs.push 'lib'
		t.test_files = FileList['spec/xxxxxxxx/*_spec.rb']
		t.verbose = true
	end
snippet minitest requires
	require 'minitest/spec'
	require 'minitest/autorun'
snippet Rakefile
	require 'bundler/gem_tasks'
	require 'rake/testtask'

	task :default => [:test]

	Rake::TestTask.new do |t|
		t.libs.push "lib"
		t.test_files = FileList['spec/xxxxxxxxx/*_spec.rb']
		t.verbose = true
	end
snippet test
	def test_that_${1:test_method}
		${2}
	end
snippet assert_equal
	assert_equal ${1:expected}, ${2:value}
snippet equal 
	assert_equal ${1:expected}, ${2:value}
snippet refute_match
	refute_match ${1:not_expected}, ${2:value}
snippet not_equal
	refute_match ${1:not_expected}, ${2:value}
snippet describe 
	describe ${1:describe_this} do
		before do
		end

		${2}
	end
snippet it  
	it "${1}" do
	  ${2}	
	end
snippet itshould
	it "should ${1}" do
	  ${2}	
	end
snippet matcher must_equal
	${1}.must_equal ${2}
snippet matcher wont_match 
	${1}.wont_match ${2}
# Sinatra
snippet sinatra Test browser
	browser = Rack::Test::Session.new(Rack::MockSession.new(Sinatra::Application))
snippet sinatra Last response
	assert browser.last_response.ok?
